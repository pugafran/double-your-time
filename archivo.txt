La Universidad de Oviedo, a través de la Escuela Politécnica de Ingeniería de Gijón (EPI), presenta el proyecto "Copilot inteligente para consultas LINQ/SQL" desarrollado por Francisco Gabriel Puga Lojo. Este proyecto tiene como objetivo facilitar la generación de consultas SQL de forma más accesible para empleados sin profundos conocimientos técnicos. En colaboración con Mecalux, líder en tecnología intralogística, se busca simplificar y agilizar procesos internos, mejorando la eficiencia en la toma de decisiones en el entorno empresarial actual.

El proyecto se enfoca en la generación automática de código a través de MSSCopilot, con el fin de optimizar el manejo de bases de datos. Se detallan las metodologías de trabajo, el desarrollo del proyecto, las lecciones aprendidas y conclusiones, además de la relación con los conocimientos adquiridos durante la carrera de Ingeniería Informática en Tecnologías de la Información.

Se analiza el perfil profesional requerido para desempeñar el proyecto, destacando aspectos como habilidades necesarias, formación y sugerencias para futuras mejoras. La colaboración entre el mundo académico y empresarial resulta clave para la innovación y resolución de problemas en el ámbito de la informática.Mecalux es una empresa líder en el sector de sistemas de almacenamiento, con presencia global y una amplia gama de soluciones que incluyen estanterías, almacenes automatizados y software para la gestión logística. La división de Mecalux Software Solutions se enfoca en el desarrollo de software para almacenes. Durante las prácticas en Mecalux, el equipo de Data Analytics se encargó de recopilar, limpiar e interpretar datos para resolver problemas y mejorar procesos. A pesar de la diversidad de perfiles en el equipo, todos demostraron habilidades para el análisis lógico y el trabajo en equipo. Además de su rol tradicional, también colaboran en la resolución de inconvenientes en otros departamentos y en la investigación de nuevas soluciones. Realizan funciones de I+D+I, innovando y probando mejoras antes de implementarlas.

La metodología de trabajo incluye tanto el teletrabajo como reuniones diarias en las que se comparte el progreso y se asignan tareas. Durante las prácticas, el enfoque estuvo en proyectos específicos, con un equipo reducido que incluía a otro becario de Ingeniería Informática y un tutor de Data Analytics. La coordinación entre ellos fue clave para maximizar el tiempo juntos y abordar eficientemente los desafíos que surgían.Durante el desarrollo del proyecto de MSSCopilot, se enfocaron en crear una herramienta que generara código automáticamente en C# / LINQ a partir de la base de código existente en la compañía. Esto facilitaba la comunicación entre los miembros del equipo, permitiendo compartir avances a través de la plataforma de Teams. La colaboración fue constante y efectiva, tanto en persona como a través de chats.

El proyecto inició en una etapa inicial, lo que facilitó la integración de nuevas funciones y la comprensión profunda del mismo. Se avanzó en funcionalidades no previstas inicialmente, como la explicación de código. Se realizaron investigaciones y se utilizaron diversas tecnologías en el proceso de desarrollo, algunas de las cuales fueron descartadas a medida que se identificaban mejores opciones.

En cuanto a las tecnologías utilizadas, se destacó el uso de LLM como Ollama para comprender y generar texto. El entrenamiento del sistema se realizó a partir de la base de código de la empresa, utilizando técnicas como Fine-tuning y Embeddings para capturar significados y relaciones semánticas. La exploración de herramientas y enfoques en el campo de la inteligencia artificial fue extensa y fundamental para el desarrollo del proyecto.El desarrollo del Copilot involucra dos opciones: generar un nuevo modelo con conocimientos nuevos o buscar respuestas en una base de datos de consultas previamente escritas. Inicialmente se utilizaron embeddings con SQLite y C# para la base de datos, pero luego se cambió a pasar contenido de tablas en versiones posteriores. Se implementó la comparación entre embeddings de preguntas y la base de datos en el código, utilizando la distancia euclidiana. Se mejoró el modelo con múltiples versiones y mejoras, como la elección del modelo Codellama-instruct por su capacidad de generar y explicar código. Se cambió a PostgreSQL y se usó un módulo pgvector para operaciones vectoriales, mejorando los tiempos de respuesta. Se agregaron métodos para detectar preguntas de explicación y mejorar el tiempo de respuesta del Copilot. Además, se creó un menú de inicio para elegir configuraciones como el modelo LLM, la utilización de PostgreSQL o SQLite, y el uso de embeddings. Posteriormente se probó el Fine-tuning después de que la versión con embeddings fuera funcional y tuviera tiempos aceptables de respuesta.En la siguiente etapa del proyecto se investigó y se descubrió un método llamado LoRA para hacer Fine-tuning sin necesidad de preentrenar el modelo completo. Esto permitiría adaptar modelos preentrenados a nuevas tareas sin reiniciar el entrenamiento completo. Se encontró que este método era ventajoso para Mecalux ya que evitaba los altos costos del Fine-tuning clásico y permitía adaptar el modelo a medida que la base de datos crecía, sin necesidad de empezar de cero. Se implementaron adaptadores LoRA en el modelo y se encontró un bug al respecto, que se solucionó utilizando un programa en Python del proyecto llama.cpp. También se creó un script en shell para facilitar la generación de adaptadores y la creación de métricas, superando problemas como la falta de memoria RAM suficiente. 

Al finalizar el proyecto se realizaron comparativas entre el uso de embeddings y el Fine-tuning con LoRA, donde se obtuvieron tiempos de ejecución similares. Sin embargo, se observó que en la resolución de preguntas y la coherencia en las explicaciones y generación de código, los embeddings resultaron más eficaces. Se identificó que el adaptador necesitaba un archivo con información específica para aprender, y que la forma de redactar dicho archivo no estaba tan clara. Es posible que ajustando este proceso, las comparativas favorezcan al Fine-tuning con LoRA.

Finalmente, se reflexionó sobre la relación entre las tareas desarrolladas en el proyecto y los conocimientos adquiridos en los estudios universitarios, destacando la importancia de asignaturas como Sistemas Inteligentes e Inteligencia de Negocio para la realización de las prácticas.La inteligencia artificial abarca conceptos como procesamiento del lenguaje natural, entrenamiento de modelos de lenguaje con términos como tokens, sobreajuste, subajuste, entre otros. Las asignaturas de Bases de Datos y Sistemas de Información son fundamentales para almacenar información, probar queries y aprender herramientas como PostgreSQL y SQLite. En Metodología de la Programación se destaca el polimorfismo y en Tecnologías y Paradigmas de la Programación se enfatizan los patrones de diseño, predominando el uso de Java en el backend. En Programación Concurrente y Paralela se menciona la utilidad de la paralelización de tareas, especialmente en CUDA. En Configuración y Evaluación de Sistemas se realizan benchmarks y pruebas de rendimiento, detectando problemas de tiempo de respuesta. Sistemas Distribuidos y Algoritmia son asignaturas donde se trabaja con C y C++, útiles para Fine-tuning. Sistemas Operativos proporciona habilidades en sistemas basados en Linux y el uso de la consola. Durante las prácticas, se adquieren habilidades técnicas y blandas, alineadas con el grado de Ingeniería Informática en Tecnologías de la Información.En el ámbito de la inteligencia artificial, me interesé por la temática y decidí asumir las responsabilidades necesarias para unas prácticas. Durante este tiempo, he aprendido mucho y disfrutado de la investigación realizada para ofrecer soluciones al proyecto. He adquirido conocimientos sobre diversas tecnologías y herramientas, como LoRA, RAG y modelos LLM emergentes, entre otros.

Experimenté gran satisfacción al trabajar con diferentes lenguajes de programación, sistemas operativos y tecnologías durante mis prácticas. Incluso enfrenté desafíos con la librería llamasharp, lo cual me llevó a crear mis primeras issues en GitHub y a aprender sobre desarrollo de código colaborativo con Git.

En cuanto a lecciones aprendidas, destaco la importancia de la comunicación efectiva, el trabajo en equipo y la resolución de problemas. Aprecíé la autonomía brindada durante las prácticas, así como el énfasis en la capacidad de resolución de problemas y el pensamiento crítico por parte de mi tutor.

Durante mi tiempo en Mecalux, desarrollé software con enfoque en inteligencia artificial y aplicaciones, lo que coincidió con mi perfil profesional como futuro ingeniero informático. Este rol implicó el desarrollo de soluciones de inteligencia artificial, programación en diversos lenguajes, uso de bases de datos y la implementación de algoritmos de IA.Principios de programación orientada a objetos, habilidades en bases de datos y conocimientos básicos en inteligencia artificial eran requeridos, además de resolver problemas técnicos complejos y trabajar en equipo con autonomía. Mi formación en programación y sistemas operativos fue fundamental, pero adaptarme a nuevas tecnologías como C# y herramientas de inteligencia artificial resaltó la importancia del aprendizaje autónomo. Las prácticas me permitieron adquirir habilidades técnicas y blandas, alineando mis objetivos profesionales con el desarrollo de software e inteligencia artificial. Identifiqué áreas de mejora en tecnologías avanzadas y en profundizar en inteligencia artificial para mi desarrollo futuro. 

En cuanto a sugerencias para mejorar las prácticas, la comunicación a través de Teams fue eficiente, pero se podría considerar el uso de herramientas más especializadas como Jira o Slack para una gestión aún más precisa. Además, recibir merchandising por parte de la empresa podría fortalecer el vínculo con los estudiantes y promover su nombre en el ámbito académico de la informática.